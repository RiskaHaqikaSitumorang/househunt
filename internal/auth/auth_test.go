package auth_test

import (
	"github.com/willemschots/househunt/internal/auth"
)

type passwordTest struct {
	raw     string
	hashStr string
	hash    auth.Argon2Hash
}

func passwordTests() map[string]passwordTest {
	return map[string]passwordTest{
		"min length ascii": {
			raw:     "12345678",
			hashStr: "$argon2id$v=19$m=47104,t=1,p=1$vP9U4C5jsOzFQLj0gvUkYw$YLrSb2dGfcVohlm8syynqHs6/NHxXS9rt/t6TjL7pi0",
			hash: auth.Argon2Hash{
				Variant:     "argon2id",
				Version:     19,
				MemoryKiB:   47104,
				Iterations:  1,
				Parallelism: 1,
				Salt: []byte{
					0xbc, 0xff, 0x54, 0xe0, 0x2e, 0x63, 0xb0, 0xec,
					0xc5, 0x40, 0xb8, 0xf4, 0x82, 0xf5, 0x24, 0x63,
				},
				Hash: []byte{
					0x60, 0xba, 0xd2, 0x6f, 0x67, 0x46, 0x7d, 0xc5,
					0x68, 0x86, 0x59, 0xbc, 0xb3, 0x2c, 0xa7, 0xa8,
					0x7b, 0x3a, 0xfc, 0xd1, 0xf1, 0x5d, 0x2f, 0x6b,
					0xb7, 0xfb, 0x7a, 0x4e, 0x32, 0xfb, 0xa6, 0x2d,
				},
			},
		},
		"max length ascii": {
			raw:     stringOfLen(512),
			hashStr: "$argon2id$v=19$m=47104,t=1,p=1$Ndxt51GJNM44qImzaA9REw$t3YTeou+mW65MzPn7n6kF2boqiO4z1LQl24PzXW7rEY",
			hash: auth.Argon2Hash{
				Variant:     "argon2id",
				Version:     19,
				MemoryKiB:   47104,
				Iterations:  1,
				Parallelism: 1,
				Salt: []byte{
					0x35, 0xdc, 0x6d, 0xe7, 0x51, 0x89, 0x34, 0xce,
					0x38, 0xa8, 0x89, 0xb3, 0x68, 0xf, 0x51, 0x13,
				},
				Hash: []byte{
					0xb7, 0x76, 0x13, 0x7a, 0x8b, 0xbe, 0x99, 0x6e,
					0xb9, 0x33, 0x33, 0xe7, 0xee, 0x7e, 0xa4, 0x17,
					0x66, 0xe8, 0xaa, 0x23, 0xb8, 0xcf, 0x52, 0xd0,
					0x97, 0x6e, 0xf, 0xcd, 0x75, 0xbb, 0xac, 0x46,
				},
			},
		},
		"non-ascii": {
			raw:     "ðŸ¥¸ðŸ¥¸ðŸ¥¸",
			hashStr: "$argon2id$v=19$m=47104,t=1,p=1$CkX5zzYLJMWm0y/17eScyw$Qfah+NewdsdeF0+iV72mShZhRO93Qwzdj17TUZCH6ZU",
			hash: auth.Argon2Hash{
				Variant:     "argon2id",
				Version:     19,
				MemoryKiB:   47104,
				Iterations:  1,
				Parallelism: 1,
				Salt: []byte{
					0xa, 0x45, 0xf9, 0xcf, 0x36, 0xb, 0x24, 0xc5,
					0xa6, 0xd3, 0x2f, 0xf5, 0xed, 0xe4, 0x9c, 0xcb,
				},
				Hash: []byte{
					0x41, 0xf6, 0xa1, 0xf8, 0xd7, 0xb0, 0x76, 0xc7,
					0x5e, 0x17, 0x4f, 0xa2, 0x57, 0xbd, 0xa6, 0x4a,
					0x16, 0x61, 0x44, 0xef, 0x77, 0x43, 0xc, 0xdd,
					0x8f, 0x5e, 0xd3, 0x51, 0x90, 0x87, 0xe9, 0x95,
				},
			},
		},
	}
}

func stringOfLen(x int) string {
	alphabet := "1234567890abcdefghijklmnopqrstuvwxyz"
	out := make([]byte, x)
	for i := 0; i < x; i++ {
		out[i] = alphabet[i%len(alphabet)]
	}
	return string(out)
}

func must[T any](v T, err error) T {
	if err != nil {
		panic(err)
	}
	return v
}
